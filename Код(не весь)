Здесь только некоторые обрезки кода, а в особенности части по взаимодействию плат, по причине того что то тот код что есть 
полурабочий и содержит много костылей которые надо исправить и я не хочу его демонстрировать старый код не стал демонстрировать 
по той причие что у меня его больше нет и к тому же он аобсолютно не подходит к новой компонентной базе метеостанции
(из за новой компонентной базы появились проблемы с кодом), причины изменения компонентой базы в комментариях к ветке с фото старой версии метеостанции
//BME280 и Передача сразу на облако, а не центральный датчик


  #include <ESP8266WiFi.h>                             
#include <Wire.h>                                      
#include <Adafruit_BME280.h>                          
#include <Adafruit_Sensor.h>     
#include <Adafruit_BMP280.h>                         
 
#define SEALEVELPRESSURE_HPA (1013.25)                
 
Adafruit_BME280 bme;                                   
 
const char* ssid = "Имя вайфая";       
const char* password = "Место ввода пароля";    
 
WiFiServer server(80);                                 
String header;
 
void setup() {
  Serial.begin(115200);                                 
  bool status;
                                                       
  if (!bme.begin(0x76)) {                             
    Serial.println("Could not find a valid BMP280 sensor, check wiring!"); 
    while (1);                                       
  }
 
  Serial.print("Connecting to ");                 
  Serial.println(ssid);                             
  WiFi.begin(ssid, password);                        
  while (WiFi.status() != WL_CONNECTED) {              
    delay(20000);                                      
    Serial.print(".");                               
  }
 
  Serial.println("");                                 
  Serial.println("WiFi connected.");                  
  Serial.println("IP address: ");                     
  Serial.println(WiFi.localIP());                      t 
  server.begin();                                  
}
 
void loop(){
  WiFiClient client = server.available();             
 
  if (client) {                                         
    Serial.println("New Client.");                     
    String currentLine = "";                         
    while (client.connected()) {                        
      if (client.available()) {                      
        char c = client.read();                        
        Serial.write(c);                                
        header += c;
        if (c == '\n') {                               
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");         
            client.println("Content-type:text/html ");
            client.println("Connection: close");        
            client.println("Refresh: 10");             
            client.println();
            
            client.println("<!DOCTYPE html><html>");    
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<meta charset='UTF-8'>");   
            client.println("<link rel=\"icon\" href=\"data:,\">");
                     
            client.println("<style>body { text-align: center; font-family: \"Trebuchet MS\", Arial;}");
            client.println("table { border-collapse: collapse; width:40%; margin-left:auto; margin-right:auto; }");
            client.println("th { padding: 12px; background-color: #0043af; color: white; }");
            client.println("tr { border: 1px solid #ddd; padding: 12px; }");
            client.println("tr:hover { background-color: #bcbcbc; }");
            client.println("td { border: none; padding: 12px; }");
            client.println(".sensor { color:white; font-weight: bold; background-color: #bcbcbc; padding: 1px; }");
            
            client.println("</style></head><body><h1>Метеостанция на BMP280 и ESP8266</h1>");
            client.println("<table><tr><th>Параметр</th><th>Показания</th></tr>");
            client.println("<tr><td>Температура</td><td><span class=\"sensor\">");
            client.println(bme.readTemperature());
            client.println(" *C</span></td></tr>");    
            client.println("<tr><td>Давление</td><td><span class=\"sensor\">");
            client.println(bme.readPressure() / 100.0F);
            client.println(" hPa</span></td></tr>");
            client.println("<tr><td>Приблизительная высота над уровнем моря</td><td><span class=\"sensor\">");
            client.println(bme.readAltitude(SEALEVELPRESSURE_HPA));
            client.println(" m</span></td></tr>"); 
            client.println("<tr><td>Влажность</td><td><span class=\"sensor\">");
            client.println(bme.readHumidity());
            client.println(" %</span></td></tr>"); 
            client.println("</body></html>");
            
            client.println();
            break;
          } else { 
            currentLine = "";
          }
        } else if (c != '\r') {  
          currentLine += c;      
        }
      }
    }
    header = "";
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}

//Датчик влажности почвы

int sensor_pin = A0; 
int data;

void setup() {
  Serial.begin(9600); 
}

void loop() {
  data = analogRead(sensor_pin); 
  data = map(data, 579, 0, 0, -100); 
  Serial.print("Влажность: ");
  Serial.print(data); 
  Serial.println("%");
  delay(1000);
}

//Проверка на работоспособность BME280(должен выводить в serial Monitor данные с датчика)


#include <GyverBME280.h>
GyverBME280 bme;
void setup() {
  Serial.begin(9600);
  Serial.println("Start");
  
 
  if (!bme.begin(0x77)) Serial.println("Error!");
}
void loop() {
 
  Serial.print("Temperature: ");
  Serial.println(bme.readTemperature());
  
  Serial.print("Humidity: ");
  Serial.println(bme.readHumidity());
 
  Serial.print("Pressure: ");
  Serial.println(bme.readPressure());
  Serial.println();
  delay(100000);
}
